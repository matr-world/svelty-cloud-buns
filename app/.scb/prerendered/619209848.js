/* src/lib/components/nav.svelte generated by Svelte v3.58.0 */
import {
	SvelteComponent,
	append_hydration,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert_hydration,
	noop,
	safe_not_equal,
	set_style,
	space,
	text
} from "svelte/internal";

function create_fragment(ctx) {
	let nav;
	let ul;
	let li0;
	let a0;
	let t0;
	let t1;
	let li1;
	let a1;
	let t2;

	return {
		c() {
			nav = element("nav");
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t0 = text("Home");
			t1 = space();
			li1 = element("li");
			a1 = element("a");
			t2 = text("About");
			this.h();
		},
		l(nodes) {
			nav = claim_element(nodes, "NAV", {});
			var nav_nodes = children(nav);
			ul = claim_element(nav_nodes, "UL", {});
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", {});
			var li0_nodes = children(li0);
			a0 = claim_element(li0_nodes, "A", { href: true });
			var a0_nodes = children(a0);
			t0 = claim_text(a0_nodes, "Home");
			a0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t1 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", {});
			var li1_nodes = children(li1);
			a1 = claim_element(li1_nodes, "A", { href: true });
			var a1_nodes = children(a1);
			t2 = claim_text(a1_nodes, "About");
			a1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			nav_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(a0, "href", "/");
			set_style(a0, "color", /*color*/ ctx[0]);
			attr(a1, "href", "/about");
		},
		m(target, anchor) {
			insert_hydration(target, nav, anchor);
			append_hydration(nav, ul);
			append_hydration(ul, li0);
			append_hydration(li0, a0);
			append_hydration(a0, t0);
			append_hydration(ul, t1);
			append_hydration(ul, li1);
			append_hydration(li1, a1);
			append_hydration(a1, t2);
		},
		p(ctx, [dirty]) {
			if (dirty & /*color*/ 1) {
				set_style(a0, "color", /*color*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(nav);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { color = "red" } = $$props;

	$$self.$$set = $$props => {
		if ('color' in $$props) $$invalidate(0, color = $$props.color);
	};

	return [color];
}

class Nav extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { color: 0 });
	}
}

export default Nav;