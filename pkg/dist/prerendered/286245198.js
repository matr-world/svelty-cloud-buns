/* src/lib/pages/home.svelte generated by Svelte v3.58.0 */
import {
	SvelteComponent,
	append_hydration,
	append_styles,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert_hydration,
	listen,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "svelte/internal";

import Nav from "../components/nav.svelte";

function add_css(target) {
	append_styles(target, "svelte-1mwh9qx", "h1.svelte-1mwh9qx{color:red}");
}

function create_fragment(ctx) {
	let nav;
	let t0;
	let h10;
	let t1;
	let t2;
	let t3;
	let t4;
	let h11;
	let t5;
	let t6;
	let t7;
	let t8;
	let button;
	let t9;
	let current;
	let mounted;
	let dispose;
	nav = new Nav({ props: { color: "blue" } });

	return {
		c() {
			create_component(nav.$$.fragment);
			t0 = space();
			h10 = element("h1");
			t1 = text("Hello ");
			t2 = text(/*name*/ ctx[0]);
			t3 = text("!");
			t4 = space();
			h11 = element("h1");
			t5 = text("Hello ");
			t6 = text(/*name*/ ctx[0]);
			t7 = text("!");
			t8 = space();
			button = element("button");
			t9 = text("Click");
			this.h();
		},
		l(nodes) {
			claim_component(nav.$$.fragment, nodes);
			t0 = claim_space(nodes);
			h10 = claim_element(nodes, "H1", { class: true });
			var h10_nodes = children(h10);
			t1 = claim_text(h10_nodes, "Hello ");
			t2 = claim_text(h10_nodes, /*name*/ ctx[0]);
			t3 = claim_text(h10_nodes, "!");
			h10_nodes.forEach(detach);
			t4 = claim_space(nodes);
			h11 = claim_element(nodes, "H1", { class: true });
			var h11_nodes = children(h11);
			t5 = claim_text(h11_nodes, "Hello ");
			t6 = claim_text(h11_nodes, /*name*/ ctx[0]);
			t7 = claim_text(h11_nodes, "!");
			h11_nodes.forEach(detach);
			t8 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t9 = claim_text(button_nodes, "Click");
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h10, "class", "svelte-1mwh9qx");
			attr(h11, "class", "svelte-1mwh9qx");
		},
		m(target, anchor) {
			mount_component(nav, target, anchor);
			insert_hydration(target, t0, anchor);
			insert_hydration(target, h10, anchor);
			append_hydration(h10, t1);
			append_hydration(h10, t2);
			append_hydration(h10, t3);
			insert_hydration(target, t4, anchor);
			insert_hydration(target, h11, anchor);
			append_hydration(h11, t5);
			append_hydration(h11, t6);
			append_hydration(h11, t7);
			insert_hydration(target, t8, anchor);
			insert_hydration(target, button, anchor);
			append_hydration(button, t9);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*makeAName*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 1) set_data(t2, /*name*/ ctx[0]);
			if (!current || dirty & /*name*/ 1) set_data(t6, /*name*/ ctx[0]);
		},
		i(local) {
			if (current) return;
			transition_in(nav.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(nav.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(nav, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(h10);
			if (detaching) detach(t4);
			if (detaching) detach(h11);
			if (detaching) detach(t8);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { name = "world" } = $$props;
	const makeAName = () => "WJPPPP";

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
	};

	return [name, makeAName];
}

class Home extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 0 }, add_css);
	}
}

export default Home;